ohohohohohohohohohohohohohohohohohohohohohohohoh
hahahahahahahahahahahahahahahahaha
这是一个测试案例

用电信号传输TCP、IP数据
--协议栈内部工作流程
网络控制软件（ 协议栈） 和网络硬件（ 网卡） 如何将浏览器的消息发送给服务器？

浏览器、邮件等一般应用程序收发数据时用 TCP；
DNS 查询等收发较短的控制数据时用 UDP。

协议栈是根据套接字中记录的控制信息来工作的。

一、创建套接字
应用程序调用 socket 申请创建套接字， 协议栈根据应用程序的申请执行创建套接字。
创建套接字时，首先分配一个套接字所需的内存空间，然后向其中写入初始状态。
二、连接服务器
连接实际上是通信双方交换控制信息， 在套接字中记录这些必要信息并准备数据收发的一连串操作。

通信操作中使用的控制信息分为两类：
· 头部中记录的信息（TCP 头部、 以太网头部、 IP 头部）
· 套接字（协议栈中的内存空间）中记录的信息
不同系统的内部结构不同，协议栈的实现方式不同，必要的控制信息就不同，但只要在通信
时按照规则将必要的信息写入头部，这些不同的系统之间依然能够互相通信。（例如Linux
系统和Windows系统之间、手机和电脑之间）。


ACK（Acknowledgment）：确认标志
SYN（Synchronize）：同步标志，同步初始序列号
FIN（Finish）：终止标志，表示已完成数据传输，请求终止连接

1.连接操作的第一步是在 TCP 模块处创建表示连接控制信息的头部。 connect
通过 TCP 头部中的发送方和接收方端口号可以找到要连接的套接字。
2.三次握手，建立连接
 1）客户端生成包含 SYN：1、初始序号值、窗口大小的 TCP 包发送给服务器；
 2）服务器返回包含 SYN：1、初始序号值、ACK：1、窗口大小的 TCP 包给客户端；
 3）客户端返回 ACK 号，表示确认。

3.收发数据（滑动窗口）
客户端和服务器都有收发数据的场景，以客户端为例：
客户端应用程序调用write将要发送的数据交给协议栈，协议栈收到数据后执行发送操作。
 1）客户端 TCP 模块将请求信息切分成块，每一块都由 TCP 头部（序号）和数据组成；
 2）服务器收到数据包会将包存储在接收缓冲区中，向客户端返回 ACK 号和窗口大小（自己能够接受多大的数据量，TCP调优参数）。
 这个过程是持续的，随着数据的收发和服务器应用程序读取处理缓冲区的数据，双方会有多次的交互。
·接收方在发送 ACK 号和窗口更新时，会将多个消息合并发送，提升网络效率。

4.断开连接，删除套接字
Http1.0由服务器发起断开，1.1支持客户端发起。

应用程序调用Socket库的close程序，协议栈开始工作，四次挥手。
以客户端发起断开为例：
 1）客户端发送 FIN：1
 2）服务器返回 ACK 号
 3）服务器发送 FIN：1
 4）客户端返回 ACK 号
 在一定时间后（防止网络重传 FIN），删除套接字

三、IP与以太网的包收发操作
TCP 模块在执行连接、收发、断开等各阶段操作时，都需要委托 IP 模块将数据封装成包发送给通信对象。
委托的过程就是 TCP 模块在数据块的前面加上 TCP 头部， 然后整个传递给 IP 模块，
还需要指定通信对象的 IP 地址。
封装好的包会被交给网络硬件（以太网、无线局域网），然后交由网卡将网络包转换为电信号或光信号，
通过网线或光纤发送出去，经过集线器、路由器等转发设备，一步一步送达到接收方。

！TCP 模块在收发数据时会分为好几个阶段， 并为各个阶段设计了实现相应功能的网络包， 
但 IP 的包收发操作都是相同的， 并不会因包本身而有所区别。  IP 模块会将 TCP 头部和
数据块看作一整块二进制数据， 在执行收发操作时并不关心其中的内容。
所以无论要收发的包是控制包还是数据包，IP 模块的收发操作都是相同的。


1、IP 模块负责添加如下两个头部：
（1）MAC 头部：以太网用的头部，包含 MAC 地址
（2）IP 头部：IP 用的头部，包含 IP 地址

（1）IP头部
！IP 头部的“接收方 IP 地址”填写通信对象的 IP 地址。
发送方 IP 地址需要判断发送所使用的网卡，并填写该网卡的 IP 地址。

Windows 下 route print 查看路由表，将目标 IP 和网络目标对比，可以查到 Interface 网卡等
网络接口、Gateway 网关（下一个路由器的 IP 地址，在 TCP/IP 的世界里 Gateway 就是路由器的意思）
的 IP 地址。

（2）MAC头部
发送方 MAC 地址由网卡驱动程序从网卡ROM中读取，或者从内存中已配置好的文件中读取。
接收方 MAC 地址需要用 ARP 广播进行查询。

2、以太网
（1）将包发送到 MAC 头部的接收方 MAC 地址代表的目的地，
（2）用发送方 MAC地址识别发送方
（3） 用以太类型识别包的内容 
可以认为具备这 3 个性质的网络就是以太网。

3、网卡：将 IP 包转换成电或光信号发送出去
缓冲区、MAC模块、PHY（MAU）

4、接收返回包
过程与发送相反。

5、TCP 和 UDP 的使用
·不需要重发的数据用 UDP 发送更高效
·像 DNS 查询等交换控制信息的操作基本上都可以在一个包的大小范围内解决， 这种场景中
可以用 UDP 来代替 TCP。也就是短数据。
·音频和视频数据
音频和视频数据必须在规定的时间内送达， 一旦送达晚了， 就会错过播放时机，导致声音和图像卡顿。
如果像 TCP 一样通过接收确认响应来检查错误并重发，重发会消耗一定的时间，这对于对时效性有
较高要求的音视频数据来说不太合适。





从网线到网络设备
--探索集线器、交换机和路由器


一、信号在网线和集线器中传输
双绞线噪声抑制

集线器通过广播将信号发送给所有连接在它上面的线路。


二、交换机的包转发操作
·交换机端口的 MAC 模块不具有 MAC 地址。
·交换机根据 MAC 地址表查找 MAC 地址，然后将信号发送到相应的端口。
端口中的 MAC 模块和 PHY（ MAU） 模块会执行发送操作， 将信号发送到网线中。
·交换机的全双工模式可以同时发送和接收信号。

|在以太网中， 当没有数据在传输时， 网络中会填充一种被称为连接脉冲的脉冲信号。 在没有数据信号时就填
充连接脉冲， 这使得网络中一直都有一定的信号流过， 从而能够检测对方是否在正常工作， 或者说网线有没
有正常连接。 以太网设备的网线接口周围有一个绿色的 LED 指示灯， 它表示是否检测到正常的脉冲信号。 
如果绿灯亮， 说明 PHY（ MAU） 模块以及网线连接正常。

·交换机可同时执行多个转发操作
而集线器如果同时输入多个信号就会发生碰撞， 无法同时传输多路信号。
现在路由器通常内置交换机功能，集线器逐渐被淘汰。


三、路由器的包转发操作
路由器的内部结构

·路由器包含转发模块和端口模块。其中转发模块负责判断包的转发目的地， 端口模块负责包的收发操作。
·路由器的各个端口都具有 MAC 地址和 IP 地址。它能够成为以太网的发送方和接收方，但并不会
成为 IP 的发送方和接收方。
·路由器根据“IP 地址”判断转发目标。
·路由器会忽略主机号，只匹配网络号。
·路由器的包接收操作类似于网卡。
·通过路由器转发的网络包，其接收方 MAC 地址为路由器端口的 MAC 地址。

路由器判断下一个转发目标的方法如下:
●  如果路由表的网关列内容为 IP 地址，则该地址就是下一个转发目标。
●  如果路由表的网关列内容为空，则 IP 头部中的接收方 IP 地址就是下一个转发目标。
路由器也会使用 ARP 来查询下一个转发目标的 MAC 地址。

！路由器将包的传输工作委托给交换机来进行
简单来说， IP（ 路由器） 负责将包发送给通信对象这一整体过程， 而其中将包传输到下一
个路由器的过程则是由以太网（ 交换机） 来负责的。


四、路由器的附加功能
1.地址转换
针对内网中部分被分配私有地址的设备，想要和互联网进行收发网络包，就需要进行地址转换。
在包收发过程中， 地址转换设备需要根据对应表查找私有地址和公有地址的对应关系， 再改写地址和端口号之后进行转发。 当数据收发结束， 进入断开阶段， 访问互联网的操作全部完成后， 对应表中的记录就会被删除。
！私有地址和公有地址

2.包过滤



通过接入网进入互联网内部
    --探索接入网和网络运营商

1.ADSL 接入网的结构和工作方式
互联网接入路由器会在网络包前面加上 MAC 头部、PPPoE 头部、PPP 头 部 总 共 3 种 头 部，然 后 发 送 给 ADSL Modem（PPPoE 方式下）。
ADSL Modem（调制解调器） 将包拆分成信元，并转换成电信号发送给分离器。
ADSL Modem 采用了一种用圆滑波形（正弦波）对信号进行合成来表示 0 和 1 的技术，这种技术就称为调制。
调制有很多方式，ADSL 采用的调制方式是振幅调制（ASK）和相位调制（PSK）相结合的正交振幅调制（QAM）方式。

从分离器出来 --> 室内电话线 --> IDF（中间配线盘）、MDF（主配线盘、总配线架）
--> 保安器 --> 电话电缆 --> 电话局
信号通过电话线到达电话局之后，会经过配线盘、 分离器到达 DSLAM：
DSLAM，数字用户线接入复用设备（一种电话局用的多路 ADSL Modem，可以理解为将多个 ADSL Modem 整合在一个外壳里的设备）。

DSLAM 具有 ATM 接口，和后方路由器收发数据时使用的是原始网络包拆分后的 ATM 信元形式。

DSLAM --> BAS --> 隧道专用路由器 --> 互联网


2.光纤接入网（FTTH）
光纤通信原理
需要先将数字信息转换成电信号，然后再将电信号转换成光信号。
电信号 1 表示高电压，0 表示低电压，将这样的电信号输入 LED、 激光二极管等光源后，这些光源就会根据信号电压的变化发光，高电压发光亮，低电压发光暗。
光信号在光纤中传导之后到达接收端，接收端有可以感应光线的光敏元件，光敏元件可以根据光的亮度产生不同的电压。当光信号照射到上面时，光亮的时候就产生高电压，光暗的时候就产生低电压，这样就将光信号转换成了电信号。
最后再将电信号转换成数字信息，我们就接收到数据了。

https://www.cnblogs.com/crazymakercircle/p/18128466#autoid-h2-6-0-0
https://www.cnblogs.com/jyroy/p/11365935.html
https://www.cnblogs.com/zhengbin/p/5653051.html

SpringBoot 自动装配使得开发人员可以轻松地搭建、配置和运行应用程序，而无需手动管理大部分的 bean 和配置。
自动装配机制与模块化和复用化密切相关，它们之间存在着相互促进和互补的关系。

@SpringBootApplication
    @SpringBootConfiguration
        @Configuration 声明为配置类，底层也是通过 @Component
    @EnableAutoConfiguration
        @AutoConfigurationPackage
            @Import({AutoConfigurationPackages.Registrar.class})
            扫描当前应用程序的主类所在的包及其子包
            1、将扫描到的组件注册为bean（这个功能跟@ComponentScan是一样的）
            2、将包路径注册为 BeanDefinition（多模块之间路径扫描，以实现自动装配，这里不够详细）
                例如SpringBoot接入JPA，JPA会去容器中找到注册的BeanDefinition，这里是怎么实现接入的
        @Import({AutoConfigurationImportSelector.class})
        读取所有 starter 下的spring.factories（2.7后有新的文件AutoConfiguration.imports），找到所有自动配置类，
        过滤@EnableAutoConfiguration 注解的 exclude 和 excludeName，过滤@Conditional（@ConditionalOnClass...）条件注解，
        注册到Spring 容器中。

        spring.factories文件通常用于第三方库或模块中，用于向Spring Boot注册自己的自动配置类。这样，当用户引入这些库时，Spring Boot能够自动识别并加载这些配置类，而不需要用户手动配置
    @ComponentScan
    扫描、注册bean

自定义 SpringBoot starter
1、定义 Starter 模块：创建一个 Maven 或 Gradle 项目，作为 Starter 模块。该模块应该包含要提供的功能、配置和依赖项。
2、创建自动配置类：编写一个自动配置类，该类负责配置和初始化 Starter 提供的功能。这个类通常需要用 @Configuration 和其他条件注解（如 @ConditionalOnClass、@ConditionalOnBean 等）标记。
3、提供默认配置：通过 META-INF/spring.factories 文件中提供默认的配置类。
4、创建 Starter 类：创建一个类作为 Starter 的入口点。
5、发布到 Maven 仓库：将 Starter 打包，并发布到 Maven 中央仓库或其他公共或私有的 Maven 仓库中，

https://www.cnblogs.com/myseries/p/12050083.html
